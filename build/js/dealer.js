define(["table","player","deck","card","exports"],function(e,t,n,r,i){function s(){this.ID=null,this.table=null,this.deck=null,this.active=!1,this.init=function(e,t){this.ID=e,this.table=t,this.deck=new n.deck,this.deck.init(),this.deal()},this.getId=function(){return this.ID},this.getDeck=function(){return this.deck},this.getTable=function(){return this.table},this.getActive=function(){return this.active},this.deal=function(){if(this.active===!0){this.deck.cutDeck();for(var e=0;e<this.table.findPlayersStillPlaying().length;e++){console.log("Player #"+e+":");var t=this.dealCards(2),n=this.table.findPlayersStillPlaying()[e];n.receiveHand(t)}console.log("Burn:"),this.burnCard(),console.log("Flop:"),this.addOpenCards(3),console.log("Burn:"),this.burnCard(),console.log("Turn:"),this.addOpenCards(1),console.log("Burn:"),this.burnCard(),console.log("River:"),this.addOpenCards(1),this.active=!1}},this.burnCard=function(){this.dealCards(1)},this.addOpenCards=function(e){var t=this.dealCards(e);this.table.addOpenCards(t)},this.dealCards=function(e){if(this.active===!0){var t=[];for(var n=0;n<e;n++)t.push(this.deck.getTopCard());return t}},this.pause=function(){this.active=!1},this.resume=function(){this.active=!0,this.deal()},this.goHome=function(){this.deck.putAway()},this.score=function(){var e=null,t=null;for(var n=0;n<this.table.Players;n++)var r=this.table.getPlayers()[n],i=this.table.getOpenCards(r.showHand()).concat().sort()},this.findHighestCard=function(e){var t=2;for(var n=0;n<this.player.getCards().length;n++){var r=this.player.getCards()[n].getValue();r>t&&(t=r)}return t}}i.dealer=s})